AWSTemplateFormatVersion: '2010-09-09'

Description: API Gateway HTTP API to SQS.

Parameters:
  Stage:
    Type: String
    Default: dev

  ServiceName:
    Type: String
    Default: api-gw-to-sqs


Resources:
  SqsQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: 
              - sts:AssumeRole
            Principal:
              Service: "apigateway.amazonaws.com"
      Policies:
        - PolicyName: ApiDirectSendSqsMessage
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource:
                - !GetAtt SqsQueue.Arn

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: REST API Endpoint to receive payloads and queue in SQS
      Name: !Ref ServiceName
      
  ResourceWebhook:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: 'webhook'

  MethodWebhook:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ResourceWebhook
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Credentials: !GetAtt ApiRole.Arn
        Uri: !Sub
              - 'arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}'
              - QueueName: !GetAtt SqsQueue.QueueName
        RequestTemplates:
          ####
          # CONFIGURATION 1
          #   After URL encoding this works 100% - without any caveats, nothing is lost here.
          #
          # application/x-www-form-urlencoded: |
          #  #set( $fullBody = $util.urlEncode($input.body) )
          #  Action=SendMessage&MessageBody=$fullBody

          ####
          # CONFIGURATION 2
          #   Static JSON provided as body - works 100%.
          #
          # application/x-www-form-urlencoded: |
          #  Action=SendMessage&MessageBody={
          #     "type": "test",
          #     "foo": "barbarbar"
          #  }

          ####
          # CONFIGURATION 3
          #   Fixed VTL script, works in all cases.
          #   YOU CANNOT HAVE ANY WHITESPACES AND PAYLOAD MUST BE URLENCODED.
          #
          application/x-www-form-urlencoded: |
            #if($context.httpMethod=="POST")#set($requestBody=$input.path('$'))#else#set($requestBody="")#end#set($keyValuePairs=$requestBody.split("&"))#set($params=[])#foreach($kvp in $keyValuePairs)#set($operands=$kvp.split("="))#if($operands.size()==1||$operands.size()==2)#set($success=$params.add($operands))#end#end
            #set($rawJSON="{#foreach($param in $params)#set($key=$util.urlDecode($param[0]))#if($param.size()>1)#set($value=$util.urlDecode($param[1]))#else#set($value="""")#end""$key"":""$value""#if($foreach.hasNext),#end#end}")
            #set($fullBodyAsQueryParameter=$util.urlEncode($rawJSON))
            Action=SendMessage&MessageBody=$fullBodyAsQueryParameter

        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: '200'
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
      
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MethodWebhook
    Properties:
      RestApiId: !Ref Api

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref Stage
      RestApiId: !Ref Api
      DeploymentId: !Ref ApiDeployment
      Description: "stage description"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: false

Outputs:

  ApiId:
    Value: !Ref Api

  ApiRootUrl:
    Description: API endpoint URL
    Value: !Sub 
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/${Method}'
      - ApiId: !Ref Api
        Stage: !Ref Stage
        Method: 'webhook'
  
  SqsUrl:
    Description: SQS URL - here API GW should send messages with transformed payload to JSON
    Value: !Sub 
      - 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${QueueName}'
      - QueueName: !GetAtt SqsQueue.QueueName