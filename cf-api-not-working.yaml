AWSTemplateFormatVersion: '2010-09-09'

Description: API Gateway HTTP API to SQS.

Parameters:
  Stage:
    Type: String
    Default: dev

  ServiceName:
    Type: String
    Default: api-gw-to-sqs


Resources:
  SqsQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: 
              - sts:AssumeRole
            Principal:
              Service: "apigateway.amazonaws.com"
      Policies:
        - PolicyName: ApiDirectSendSqsMessage
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource:
                - !GetAtt SqsQueue.Arn

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: REST API Endpoint to receive payloads and queue in SQS
      Name: !Ref ServiceName
      
  ResourceWebhook:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: 'webhook'

  MethodWebhook:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ResourceWebhook
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Credentials: !GetAtt ApiRole.Arn
        Uri: !Sub
              - 'arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}'
              - QueueName: !GetAtt SqsQueue.QueueName
        RequestTemplates:
          #### 
          # First of all this type 'application/json' is for JSON payloads and is not a case here
          # it's here only because most of the people tried this and it works 
          # which doesn't really help at all.
          #
          # application/json: |
          #   Action=SendMessage&MessageBody=$input.body


          ####
          # CONFIGURATION 1
          #
          # This kinda works but:
          # 1) doesn't include full payload in the SQS messages
          # 2) doesn't convert  www-urlencoded data into JSON.
          #
          # Basically it's here just to prove that IAM role is correct!
          #
          application/x-www-form-urlencoded: |
            Action=SendMessage&MessageBody=$input.body

          ####
          # CONFIGURATION 2
          #
          # This is a VTL script, which causes the problem
          #
          # application/x-www-form-urlencoded: |
          #   ## Parses x-www-urlencoded data to JSON for AWS' API Gateway
          #   ##
          #   ## Author: Christian E Willman <christian@willman.io>

          #   #if ( $context.httpMethod == "POST" )
          #     #set( $requestBody = $input.path('$') )
          #   #else
          #     #set( $requestBody = "" )
          #   #end

          #   #set( $keyValuePairs = $requestBody.split("&") )
          #   #set( $params = [] )

          #   ## Filter empty key-value pairs
          #   #foreach( $kvp in $keyValuePairs )
          #     #set( $operands = $kvp.split("=") )

          #     #if( $operands.size() == 1 || $operands.size() == 2 )
          #       #set( $success = $params.add($operands) )
          #     #end
          #   #end

          #   Action=SendMessage&MessageBody=
          #   {
          #     #foreach( $param in $params )
          #       #set( $key = $util.urlDecode($param[0]) )

          #       #if( $param.size() > 1 )
          #         #set( $value = $util.urlDecode($param[1]) )
          #       #else
          #         #set( $value = "" )
          #       #end

          #       "$key": "$value"#if( $foreach.hasNext ),#end
          #     #end
          #   }

          ####
          # CONFIGURATION 3
          #
          # 
          #
          # application/x-www-form-urlencoded: |
          #   Action=SendMessage&MessageBody={
          #       "type": "test",
          #       "foo": "bar"
          #   }
          

        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: '200'
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
      
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MethodWebhook
    Properties:
      RestApiId: !Ref Api

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref Stage
      RestApiId: !Ref Api
      DeploymentId: !Ref ApiDeployment
      Description: "stage description"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: false

Outputs:

  ApiId:
    Value: !Ref Api

  ApiRootUrl:
    Description: API endpoint URL
    Value: !Sub 
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/${Method}'
      - ApiId: !Ref Api
        Stage: !Ref Stage
        Method: 'webhook'
  
  SqsUrl:
    Description: SQS URL - here API GW should send messages with transformed payload to JSON
    Value: !Sub 
      - 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${QueueName}'
      - QueueName: !GetAtt SqsQueue.QueueName